diff --git a/llvm/lib/Target/RISCV/RISCVISelLowering.cpp b/llvm/lib/Target/RISCV/RISCVISelLowering.cpp
index c2a0a2f..c66bc78 100644
--- a/llvm/lib/Target/RISCV/RISCVISelLowering.cpp
+++ b/llvm/lib/Target/RISCV/RISCVISelLowering.cpp
@@ -2191,11 +2191,15 @@ SDValue RISCVTargetLowering::LowerCall(CallLoweringInfo &CLI,
   if (GlobalAddressSDNode *S = dyn_cast<GlobalAddressSDNode>(Callee)) {
     const GlobalValue *GV = S->getGlobal();
 
-    unsigned OpFlags = RISCVII::MO_CALL;
-    if (!getTargetMachine().shouldAssumeDSOLocal(*GV->getParent(), GV))
-      OpFlags = RISCVII::MO_PLT;
+    unsigned OpFlags =
+             Subtarget.classifyGlobalFunctionReference(GV, getTargetMachine());
+
+    // Call implementation without plt
+    if (OpFlags == RISCVII::MO_GOT_HI)
+      Callee = getAddr(S, DAG, 0);
+    else
+      Callee = DAG.getTargetGlobalAddress(GV, DL, PtrVT, 0, OpFlags);
 
-    Callee = DAG.getTargetGlobalAddress(GV, DL, PtrVT, 0, OpFlags);
   } else if (ExternalSymbolSDNode *S = dyn_cast<ExternalSymbolSDNode>(Callee)) {
     unsigned OpFlags = RISCVII::MO_CALL;
 
diff --git a/llvm/lib/Target/RISCV/RISCVSubtarget.cpp b/llvm/lib/Target/RISCV/RISCVSubtarget.cpp
index 6902ed7..395da91 100644
--- a/llvm/lib/Target/RISCV/RISCVSubtarget.cpp
+++ b/llvm/lib/Target/RISCV/RISCVSubtarget.cpp
@@ -48,3 +48,17 @@ RISCVSubtarget::RISCVSubtarget(const Triple &TT, StringRef CPU, StringRef FS,
     : RISCVGenSubtargetInfo(TT, CPU, FS),
       FrameLowering(initializeSubtargetDependencies(TT, CPU, FS, ABIName)),
       InstrInfo(), RegInfo(getHwMode()), TLInfo(TM, *this) {}
+
+// This function is used only for NoPlt/NonLazyBind handling
+// but it should be extended by different types of executable files
+unsigned char RISCVSubtarget::classifyGlobalFunctionReference(
+    const GlobalValue *GV, const TargetMachine &TM) const {
+  auto *F = dyn_cast<Function>(GV);
+  if (F && !TM.shouldAssumeDSOLocal(*GV->getParent(), GV)) {
+    // We can call function without plt via got but it needs non-lazy start
+    if (F->hasFnAttribute(Attribute::NonLazyBind))
+      return RISCVII::MO_GOT_HI;
+    return RISCVII::MO_PLT;
+  }
+  return RISCVII::MO_CALL;
+}
diff --git a/llvm/lib/Target/RISCV/RISCVSubtarget.h b/llvm/lib/Target/RISCV/RISCVSubtarget.h
index 106ff49..9d170c0 100644
--- a/llvm/lib/Target/RISCV/RISCVSubtarget.h
+++ b/llvm/lib/Target/RISCV/RISCVSubtarget.h
@@ -62,6 +62,9 @@ public:
   // definition of this function is auto-generated by tblgen.
   void ParseSubtargetFeatures(StringRef CPU, StringRef FS);
 
+  unsigned char classifyGlobalFunctionReference(const GlobalValue *GV,
+  						const TargetMachine &TM) const;
+
   const RISCVFrameLowering *getFrameLowering() const override {
     return &FrameLowering;
   }
diff --git a/llvm/test/CodeGen/RISCV/no-plt.ll b/llvm/test/CodeGen/RISCV/no-plt.ll
index 8b13789..2ab62af 100644
--- a/llvm/test/CodeGen/RISCV/no-plt.ll
+++ b/llvm/test/CodeGen/RISCV/no-plt.ll
@@ -1 +1,25 @@
+; RUN: llc -mtriple=riscv64-linux-gnu --relocation-model=pic < %s | FileCheck %s
 
+declare i32 @global() nonlazybind
+
+define i32 @no_PLT_call() {
+  ;CHECK-LABEL: no_PLT_call:
+
+  ;CHECK: # %bb.0:
+
+  ;CHECK-NEXT: addi sp, sp, -16
+  ;CHECK-NEXT: .cfi_def_cfa_offset 16
+  ;CHECK-NEXT: sd ra, 8(sp)
+  ;CHECK-NEXT: .cfi_offset ra, -8
+
+  ;CHECK-NEXT: .LBB0_1: # Label of block must be emitted
+
+  ;CHECK-NEXT: auipc	a0, %got_pcrel_hi(global)
+  ;CHECK-NEXT: ld	a0, %pcrel_lo(.LBB0_1)(a0)
+  ;CHECK-NEXT: jalr	a0
+
+  ;CHECK-NEXT: ld	ra, 8(sp)
+
+  %tmp = call i32 @global()
+  ret i32 %tmp
+}
